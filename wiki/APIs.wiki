#summary APIs supported by scalaris.
#labels Featured

= Introduction =

= Web interface =

Using the web interface, you can read and write key-value pairs. The read/write will be executed within a transaction. But each transaction will execute exactly one operation.

= Java API =

The java-api directory contains library for accessing scalaris from Java. Besides executing atomic read and write operations like in the web interface. You can write more complex transactions.

{{{
// new Transaction object
Transaction transaction = new Transaction();
// start new transaction
transaction.start();

//read account A
int accountA =
    new Integer(transaction.read("accountA")).intValue();
//read account B
int accountB =
    new Integer(transaction.read("accountB")).intValue();

//remove 100$ from accountA
transaction.write("accountA",
    new Integer(accountA - 100).toString());
//add 100$ to account B
transaction.write("accountB",
    new Integer(accountB + 100).toString());

transaction.commit();

}}}
The library can also be used as a command-line interface.

= Erlang Interface =

Of course, you can write transactions in Erlang. See e.g. src/transstore/transaction_test.erl

= JSON RPC =

The boot server's web server on port 8000 accepts JSON RPC requests. The other nodes accept requests on port 8001. Exampel:

{{{
require 'rubygems'
require 'json'
require 'net/http'

def test_and_set(url, key, oldvalue, newvalue)
  uri = URI.parse url
  req = Net::HTTP::Post.new(url)
  req.add_field 'Content-Type', 'application/json'
  req.body = {:version => '1.1', :method => 'test_and_set', :params => [key, oldvalue, newvalue], :id => 0}.to_json
  res = Net::HTTP.start(uri.host, uri.port){|http|
    http.request(req)
  }
  JSON.parse(res.body)['result']
end

def read(url, key)
  uri = URI.parse url
  req = Net::HTTP::Post.new(url)
  req.add_field 'Content-Type', 'application/json'
  req.body = {:version => '1.1', :method => 'read', :params => [key], :id => 0}.to_json
  res = Net::HTTP.start(uri.host, uri.port){|http|
    http.request(req)
  }
  JSON.parse(res.body)['result']
end

def write(url, key, value)
  uri = URI.parse url
  req = Net::HTTP::Post.new(url)
  req.add_field 'Content-Type', 'application/json'
  req.body = {:version => '1.1', :method => 'write', :params => [key, value], :id => 0}.to_json
  res = Net::HTTP.start(uri.host, uri.port){|http|
    http.request(req)
  }
  JSON.parse(res.body)['result']
end
}}}