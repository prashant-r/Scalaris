#summary How nodes join the system.

= Introduction =

Starting with r529 Scalaris uses a new join protocol which does not depend on the boot-server anymore.

It works as follows: We mark one Scalaris node as being the "first node" of a Scalaris deployment. All other nodes join an existing ring, but cannot form a new ring.

The node marked as "first node" is only needed for the second node to join. From there on, additional nodes may join by contacting any alive node of the already running system.
Candidates for this can be listed in scalaris.cfg as known hosts:
{{{
{known_hosts, [{{127,0,0,1},14195, service_per_vm}, {{127,0,0,1},14196, service_per_vm},
              {{127,0,0,1},14197, service_per_vm}, {{127,0,0,1},14198, service_per_vm}]}.
}}}
A joining node will try to contact them until it manages to get an answer.

In the new "boot.sh", we mark the boot-server as being the first node in the system. It gets a special parameter "-boot_cs first true". Note, that the second node will wait until this first node is up and running.

*If you want to reboot the 'first node' started via "boot.sh"*, you have to restart it without the "-boot_cs first true" parameter. You are only allowed to start "normal" nodes when a system is running. If you would call "boot.sh" to restart the boot-server, it would form a new ring.

== Former behaviour ==

Before r529 every Scalaris deployment had a special node, the so called boot-server. The boot-server was started with "./boot.sh" resp. "scalarisctl boot start". In its web interface it provides a global view of the installation. For this view, it maintained a list of all participating nodes. It also was mandatory for new nodes to join the system.