#summary How to steer the assignemnt of replicas to nodes.

= Introduction =

Scalaris uses so called symmetric replication ([http://www.sics.se/~ali/publications/replication.pdf Symmetric Replication]) for replicating items.

Because of hashing, items are placed at random position on the ring. We are currently storing 3 additional copies of the item by adding 90°, 180°, and 270° to the original position. As nodes are also placed randomly on the ring, there is usually no control over who is responsible for which replica. In the extreme case, one server could store all four copies of one item, which makes this item vulnerable to node failures.

= Details =

You can specify the algorithm for selecting node identifiers in the config file.

== random ==

The standard key creator is called "random". It just picks a random 128-bit string.
{{{
{key_creator, random}
}}}

== random_with_bit_mask ==

For controlling the placement of replicas, you can use the "random_with_bit_mask" key creator. It also picks a random 128-bit string but applies two bitmasks as follows `(randomnumber and mask2) or mask1`. By carefully selecting the bitmask, you can control which servers are responsible for what data.

{{{
{key_creator, random_with_bit_mask}.
% place the nodes in the first quadrant
{key_creator_bitmask, {16#00000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
% place the nodes in the second quadrant
%{key_creator_bitmask, {16#40000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
% place the nodes in the third quadrant
%{key_creator_bitmask, {16#80000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
% place the nodes in the fourth quadrant
%{key_creator_bitmask, {16#C0000000000000000000000000000000, 16#3FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF}}.
}}}

see also HowToMultipleConfigFiles